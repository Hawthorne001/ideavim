name: Update Changelog with Claude

on:
  schedule:
    # Run every day at 5 AM UTC
    - cron: '0 5 * * *'
  workflow_dispatch:  # Allow manual trigger

jobs:
  update-changelog:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      id-token: write
      issues: read
      actions: read
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Need full history to analyze commits and tags
      
      - name: Run Claude Code to Update Changelog
        uses: anthropics/claude-code-action@v1
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          
          prompt: |
            ## Task: Update the CHANGES.md Changelog File
            
            You need to review the latest commits and maintain the changelog file (CHANGES.md) with meaningful changes.
            
            ### Historical Context
            
            - The changelog was actively maintained until version 2.9.0
            - There's a gap from 2.10.0 through 2.27.0 where changelog wasn't maintained
            - We're resuming changelog maintenance from version 2.28.0 onwards
            - Between 2.9.0 and 2.28.0, include this note: **"Changelog was not maintained for versions 2.10.0 through 2.27.0"**
            
            ### Changelog Structure
            
            1. **[To Be Released] Section**:
               - All unreleased changes from master branch go here
               - When a release is made, this section becomes the new version section
               - Create a new empty `[To Be Released]` section after each release
            
            2. **Version Entries Format**:
               ```
               ## 2.28.0, 2024-MM-DD
               
               ### Features:
               - Feature description [VIM-XXXX]
               
               ### Fixes:
               - Bug fix description [VIM-XXXX]
               
               ### Changes:
               - Other changes
               ```
            
            ### How to Gather Information
            
            1. **Check Current State**:
               - Read CHANGES.md to find the last documented version
               - Note the date of the last entry
            
            2. **Find Releases**:
               - Use `git tag --list --sort=-version:refname` to see all version tags
               - Tags like `2.27.0`, `2.27.1` indicate releases
               - Note: Patch releases (x.x.1, x.x.2) might be on separate branches
               - Release dates available at: https://plugins.jetbrains.com/plugin/164-ideavim/versions
            
            3. **Review Changes**:
               ```bash
               # Get commits since last documented version
               git log --oneline --since="YYYY-MM-DD" --first-parent master
               
               # Get merged PRs
               gh pr list --state merged --limit 100 --json number,title,author,mergedAt
               
               # Check specific release commits
               git log --oneline <previous-tag>..<new-tag>
               ```
            
            4. **What to Include**:
               - **Features**: New functionality with [VIM-XXXX] ticket numbers if available
               - **Bug Fixes**: Fixed issues with [VIM-XXXX] ticket references
               - **Breaking Changes**: Any backwards-incompatible changes
               - **Deprecations**: Features marked for future removal
               - **Merged PRs**: Reference significant PRs like "Implement vim-surround (#123)"
            
            5. **What to Exclude**:
               - Dependabot PRs (author: dependabot[bot])
               - Claude-generated PRs (check PR author/title)
               - Internal refactoring with no user impact
               - Documentation-only changes (unless significant)
               - Test-only changes
            
            ### Writing Style
            
            - **Be concise**: One line per change when possible
            - **User-focused**: Describe what changed from user's perspective
            - **Include references**: Add [VIM-XXXX] for YouTrack tickets, (#XXX) for PRs
            - **Group logically**: Features, Fixes, Changes, Merged PRs
            - **Use consistent tense**: Past tense for completed work
            
            ### Examples of Good Entries
            
            ```
            ### Features:
            * Added support for `gn` text object
            * Implemented `:tabmove` command
            
            ### Fixes:
            * [VIM-3456](https://youtrack.jetbrains.com/issue/VIM-3456) Fixed cursor position after undo in visual mode
            * [VIM-3458](https://youtrack.jetbrains.com/issue/VIM-3458) Resolved issue with `ci"` in empty strings
            * [VIM-3260](https://youtrack.jetbrains.com/issue/VIM-3260) Processing the offsets at the file end
            
            ### Merged PRs:
            * [805](https://github.com/JetBrains/ideavim/pull/805) by [chylex](https://github.com/chylex): VIM-3238 Fix recording a macro that replays another macro
            ```
            
            ### IMPORTANT Fix Format
            
            For bug fixes, use this exact format:
            * [VIM-XXXX](https://youtrack.jetbrains.com/issue/VIM-XXXX) Description of what was fixed
            
            The link to YouTrack is required for all fixes that have a ticket number.
            
            ### Process
            
            1. Read the current CHANGES.md
            2. Check git tags for any undocumented releases
            3. Review commits and PRs since last entry
            4. Group changes by release or under [To Be Released]
            5. Update CHANGES.md maintaining existing format
            6. Create a PR only if there are changes to document
            
            ### Important Notes
            
            - **Don't create a PR if changelog is already up to date**
            - **Preserve existing format and structure**
            - **Maintain chronological order (newest first)**
            - **Keep the historical gap note between 2.9.0 and 2.28.0**
            
            If you find changes that need documenting, update CHANGES.md and create a pull request with:
            - Title: "Update changelog"
            - Body: Brief summary of what was added
          
          # Allow Claude to use git, GitHub CLI, and web access for checking releases and tickets
          claude_args: '--allowed-tools "Read,Edit,Bash(git:*),Bash(gh:*),WebSearch,WebFetch(domain:plugins.jetbrains.com),WebFetch(domain:youtrack.jetbrains.com),WebFetch(domain:github.com)"'